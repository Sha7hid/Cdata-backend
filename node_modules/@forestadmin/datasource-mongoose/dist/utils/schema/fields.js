"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = require("mongoose");
const filter_operators_1 = __importDefault(require("./filter-operators"));
const schema_1 = __importDefault(require("../../mongoose/schema"));
const helpers_1 = require("../helpers");
/** Generate forest admin schema from mongoose schema */
class FieldsGenerator {
    static buildFieldsSchema(model, stack = [{ prefix: null, asFields: [], asModels: [] }]) {
        const ourSchema = {};
        const childSchema = schema_1.default.fromModel(model).applyStack(stack);
        // Add columns and many to one relations
        for (const [name, field] of Object.entries(childSchema.fields)) {
            if (name !== 'parent') {
                ourSchema[name] = this.buildColumnSchema(field);
                if (field instanceof mongoose_1.SchemaType && field.options.ref)
                    ourSchema[`${name}__manyToOne`] = this.buildManyToOne(field.options.ref, name);
            }
        }
        // When a prefix is used add pk + fk + many to one relation to the parent.
        if (stack.length > 1) {
            const parentPrefix = stack[stack.length - 2].prefix;
            ourSchema._id = this.buildVirtualPrimaryKey();
            ourSchema.parentId = {
                ...this.buildColumnSchema(childSchema.fields.parent._id),
                isPrimaryKey: false,
                validation: [{ operator: 'Present' }],
            };
            ourSchema.parent = this.buildManyToOne((0, helpers_1.escape)(parentPrefix !== null ? `${model.modelName}.${parentPrefix}` : model.modelName), 'parentId');
        }
        return ourSchema;
    }
    /** Fake primary key that will be used when we're flattening collections */
    static buildVirtualPrimaryKey() {
        return {
            type: 'Column',
            columnType: 'String',
            filterOperators: filter_operators_1.default.getSupportedOperators('String'),
            isPrimaryKey: true,
            isReadOnly: true,
            isSortable: true,
        };
    }
    static buildManyToOne(collection, foreignKey) {
        return {
            type: 'ManyToOne',
            foreignCollection: collection,
            foreignKey,
            foreignKeyTarget: '_id',
        };
    }
    /** Build ColumnSchema from CleanSchema */
    static buildColumnSchema(field) {
        const columnType = this.getColumnType(field);
        const schema = {
            columnType,
            filterOperators: filter_operators_1.default.getSupportedOperators(columnType),
            defaultValue: field.options?.default,
            isPrimaryKey: field.path === '_id',
            isReadOnly: !!field.options?.immutable,
            isSortable: !(columnType instanceof Object || columnType === 'Json'),
            type: 'Column',
            validation: field.isRequired ? [{ operator: 'Present' }] : null,
        };
        if (columnType === 'Enum') {
            schema.enumValues = this.getEnumValues(field);
        }
        return schema;
    }
    /** Compute column type from CleanSchema */
    static getColumnType(field) {
        const columnType = this.getColumnTypeRec(field);
        // Enum fields are promoted to enum instead of string _only_ if they are at the root of the
        // record.
        if (columnType === 'String') {
            const enumValues = this.getEnumValues(field);
            if (enumValues && enumValues.every(v => typeof v === 'string')) {
                return 'Enum';
            }
        }
        return columnType;
    }
    /** Build ColumnType from CleanSchema recursively */
    static getColumnTypeRec(field) {
        if (field instanceof mongoose_1.SchemaType) {
            if (['String', 'Number', 'Date', 'Boolean'].includes(field.instance)) {
                return field.instance;
            }
            if (['ObjectID', 'Buffer', 'Decimal128'].includes(field.instance)) {
                return 'String';
            }
            return 'Json';
        }
        if (field['[]']) {
            return [this.getColumnTypeRec(field['[]'])];
        }
        return Object.entries(field).reduce((memo, [name, subSchema]) => ({ ...memo, [name]: this.getColumnTypeRec(subSchema) }), {});
    }
    /** Get enum validator from field definition */
    static getEnumValues(field) {
        return field.options?.enum instanceof Array ? field.options.enum : field.options?.enum?.values;
    }
}
exports.default = FieldsGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL3NjaGVtYS9maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFTQSx1Q0FBNkM7QUFFN0MsMEVBQTBEO0FBQzFELG1FQUFpRjtBQUVqRix3Q0FBb0M7QUFFcEMsd0RBQXdEO0FBQ3hELE1BQXFCLGVBQWU7SUFDbEMsTUFBTSxDQUFDLGlCQUFpQixDQUN0QixLQUFxQixFQUNyQixRQUFlLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELE1BQU0sU0FBUyxHQUErQixFQUFFLENBQUM7UUFDakQsTUFBTSxXQUFXLEdBQUcsZ0JBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXRFLHdDQUF3QztRQUN4QyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDOUQsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUNyQixTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEtBQUssWUFBWSxxQkFBVSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRztvQkFDbEQsU0FBUyxDQUFDLEdBQUcsSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2xGO1NBQ0Y7UUFFRCwwRUFBMEU7UUFDMUUsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQixNQUFNLFlBQVksR0FBRyxLQUFL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