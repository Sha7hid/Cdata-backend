"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const luxon_1 = require("luxon");
const mongoose_1 = require("mongoose");
const schema_1 = __importDefault(require("../../mongoose/schema"));
const STRING_OPERATORS = ['Like', 'ILike', 'NotContains', 'LongerThan', 'ShorterThan'];
/** Transform a forest admin filter into mongo pipeline */
class FilterGenerator {
    static filter(model, stack, filter) {
        const fields = new Set();
        const tree = filter?.conditionTree;
        const match = this.computeMatch(model, stack, tree, fields);
        const sort = this.computeSort(filter?.sort);
        const pipeline = [];
        if (fields.size)
            pipeline.push(this.computeFields(fields));
        if (match)
            pipeline.push({ $match: match });
        if (sort)
            pipeline.push({ $sort: sort });
        if (filter?.page?.skip !== undefined)
            pipeline.push({ $skip: filter.page.skip });
        if (filter?.page?.limit !== undefined)
            pipeline.push({ $limit: filter.page.limit });
        return pipeline;
    }
    static computeMatch(model, stack, tree, fields) {
        const schema = schema_1.default.fromModel(model).applyStack(stack, true);
        if (tree instanceof datasource_toolkit_1.ConditionTreeBranch) {
            return {
                [`$${tree.aggregator.toLowerCase()}`]: tree.conditions.map(condition => this.computeMatch(model, stack, condition, fields)),
            };
        }
        if (tree instanceof datasource_toolkit_1.ConditionTreeLeaf) {
            const value = this.formatAndCastLeafValue(schema, tree, fields);
            const condition = this.buildMatchCondition(tree.operator, value);
            return { [this.formatNestedFieldPath(tree.field)]: condition };
        }
        return null;
    }
    static formatAndCastLeafValue(schema, leaf, fields) {
        // @fixme not a big fan of modifying the condition tree here.
        // those objects should be frozen, as the modification will show if the condition tree
        // is used after the request (for instance for "after hooks").
        let { value } = leaf;
        leaf.field = this.formatNestedFieldPath(leaf.field);
        const [isArray, instance] = this.getFieldMetadata(schema, leaf.field);
        // @fixme I'm really not sure that this can work in all cases.
        // It assumes that the type of the value is the same than the type of the column
        // which is not the case for many operators.
        if (isArray) {
            if (instance === 'Date' &&
                Array.isArray(value) &&
                value.every(v => luxon_1.DateTime.fromISO(v).isValid)) {
                value = value.map(v => new Date(v));
            }
            else if (instance === 'ObjectID' &&
                Array.isArray(value) &&
                value.every(v => (0, mongoose_1.isValidObjectId)(v))) {
                value = value.map(id => new mongoose_1.Types.ObjectId(id));
            }
        }
        else if (instance === 'ObjectID') {
            if (STRING_OPERATORS.includes(leaf.operator)) {
                fields.add(leaf.field);
                leaf.field = this.formatStringFieldName(leaf.field);
            }
            else if (Array.isArray(value) && value.every(v => (0, mongoose_1.isValidObjectId)(v))) {
                value = value.map(id => new mongoose_1.Types.ObjectId(id));
            }
            else if ((0, mongoose_1.isValidObjectId)(value)) {
                value = new mongoose_1.Types.ObjectId(value);
            }
        }
        else if (instance === 'Date') {
            value = new Date(value);
        }
        return value;
    }
    static buildMatchCondition(operator, formattedLeafValue) {
        switch (operator) {
            case 'GreaterThan':
                return { $gt: formattedLeafValue };
            case 'LessThan':
                return { $lt: formattedLeafValue };
            case 'Equal':
                return { $eq: formattedLeafValue };
            case 'NotEqual':
                return { $ne: formattedLeafValue };
            case 'In':
                return { $in: formattedLeafValue };
            case 'IncludesAll':
                return { $all: formattedLeafValue };
            case 'NotContains':
                return { $not: new RegExp(`.*${formattedLeafValue}.*`) };
            case 'Like':
                return this.like(formattedLeafValue, true);
            case 'ILike':
                return this.like(formattedLeafValue, false);
            case 'Present':
                return { $exists: true, $ne: null };
            default:
                throw new Error(`Unsupported '${operator}' operator`);
        }
    }
    /** @see https://stackoverflow.com/a/18418386/1897495 */
    static like(pattern, caseSensitive) {
        let regexp = pattern;
        // eslint-disable-next-line no-useless-escape
        regexp = regexp.replace(/([\.\\\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:\-])/g, '\\$1');
        regexp = regexp.replace(/%/g, '.*').replace(/_/g, '.');
        return RegExp(`^${regexp}$`, caseSensitive ? 'g' : 'gi');
    }
    static computeSort(sorts) {
        if (!sorts || sorts.length === 0)
            return null;
        const result = {};
        for (const { field, ascending } of sorts) {
            const formattedField = this.formatNestedFieldPath(field);
            result[formattedField] = ascending ? 1 : -1;
        }
        return result;
    }
    static computeFields(fields) {
        return Array.from(fields).reduce((computed, field) => {
            const stringField = this.formatStringFieldName(field);
            computed.$addFields[stringField] = { $toString: `$${field}` };
            return computed;
        }, { $addFields: {} });
    }
    static formatNestedFieldPath(field) {
        return field.replace(/:/g, '.');
    }
    static formatStringFieldName(field) {
        const parts = field.split('.');
        parts.push(`string_${parts.pop()}`);
        return parts.join('.');
    }
    static getFieldMetadata(schema, field) {
        // nested _ids are strings
        let isArray;
        let instance;
        try {
            // This may crash when we query virtual one to one relationships, because their virtual
            // fields are not in the schema (This is documented in MongooseSchema)
            const subSchema = schema.getSubSchema(field);
            isArray = subSchema.isArray;
            instance = subSchema.schemaType.instance;
        }
        catch {
            isArray = false;
            instance = 'String';
        }
        return [isArray, instance];
    }
}
exports.default = FilterGenerator;
//# sourceMappingURL=data:application/json;base64,